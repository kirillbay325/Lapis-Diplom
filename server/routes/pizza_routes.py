
from fastapi import APIRouter, UploadFile, File, Form, HTTPException, Body, Depends
from database import SessionLocal
from sqlalchemy.orm import Session
from models.service import Service
from models.user import User
from models.balance import Balance
from models.earnings import Earnings
from models.review import Review
from models.transaction import Transaction
from core.security import get_current_user

router = APIRouter()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@router.get("/services")
def get_services():
    db: Session = SessionLocal()
    services = db.query(Service).all()
    db.close()
    return services

@router.post("/services")
async def add_service(
    freelancer_name: str = Form(...),
    service_title: str = Form(...),
    description: str = Form(...),
    price: float = Form(...),
    duration: int = Form(...),
    skills: str = Form(...),
    image: UploadFile = File(...),
    category: str = Form(...),
    current_user: User = Depends(get_current_user)
):
    
    
    image_path = f"pizza_images/{image.filename}"
    with open(image_path, "wb") as f:
        f.write(await image.read())

    db: Session = SessionLocal()
    service = Service(
        freelancer_name=freelancer_name,
        service_title=service_title,
        description=description,
        price=price,
        duration=duration,
        skills=skills,
        image_path=image_path,
        category = category,
        user_id=current_user.id

    )
    db.add(service)
    db.commit()
    db.refresh(service)
    db.close()

    return {"message": "–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", "service": service}

@router.patch("/services/{service_id}/status")
def update_service_status(service_id: int, status_data: dict = Body(...)):
    db = SessionLocal()
    try:
        service = db.query(Service).filter(Service.id == service_id).first()

        if not service:
            raise HTTPException(status_code=404, detail="–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        new_status = status_data.get("status")
        if not new_status:
            raise HTTPException(status_code=400, detail="–ü–æ–ª–µ 'status' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")

        service.status = new_status
        db.commit()
        db.refresh(service)
        return {"message": "–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω", "status": service.status}
    finally:
        db.close()

@router.patch("/services/{service_id}/reviews")
def update_service_reviews(service_id: int, data: dict = Body(...)):
    db = SessionLocal()
    try:
        service = db.query(Service).filter(Service.id == service_id).first()

        if not service:
            raise HTTPException(status_code=404, detail="–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        new_reviews = data.get("reviews")
        if new_reviews is None:
            raise HTTPException(status_code=400, detail="–ü–æ–ª–µ 'reviews' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")

        service.reviews = new_reviews
        db.commit()
        db.refresh(service)
        return {"message": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ", "reviews": service.reviews}
    finally:
        db.close()

@router.post("/services/{service_id}/responses")
def add_service_response(service_id: int, data: dict = Body(...)):
    db = SessionLocal()
    try:
        service = db.query(Service).filter(Service.id == service_id).first()

        if not service:
            raise HTTPException(status_code=404, detail="–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        responder_name = data.get("name")
        if not responder_name:
            raise HTTPException(status_code=400, detail="–ò–º—è –æ—Ç–∫–ª–∏–∫–Ω—É–≤—à–µ–≥–æ—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")

        existing_names = []
        if service.responses:
            existing_names = [name.strip() for name in service.responses.split(",")]

        if responder_name in existing_names:
            raise HTTPException(
                status_code=400,
                detail="–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ —ç—Ç—É —É—Å–ª—É–≥—É"
            )

        if service.responses:
            service.responses = service.responses + "," + responder_name
        else:
            service.responses = responder_name

        db.commit()
        db.refresh(service)
        return {"message": "–û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω", "name": responder_name}
    finally:
        db.close()

@router.get("/services/categories")
def get_all_categories():
    db = SessionLocal()
    try:
        result = db.query(Service.category).all()
        categories = [row.category for row in result if row.category]
        return {"categories": categories}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        db.close()

@router.get("/my-services")
def get_my_services(
    db: Session = Depends(get_db), 
    current_user: User = Depends(get_current_user)
):
    services = db.query(Service).filter(Service.user_id == current_user.id).all()
    return services

@router.patch("/services/{service_id}/complete")
def complete_service(
    service_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    service = db.query(Service).filter(Service.id == service_id).first()
    if not service:
        raise HTTPException(status_code=404, detail="–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    if service.status != "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ":
        raise HTTPException(status_code=400, detail="–ó–∞–∫–∞–∑ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'")

    if service.freelancer_id != current_user.id:
        raise HTTPException(status_code=403, detail="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑")

    amount = service.price

    balance = db.query(Balance).filter(Balance.user_id == current_user.id).first()
    if not balance:
        balance = Balance(user_id=current_user.id, amount=0.0)
        db.add(balance)

 
    earnings = db.query(Earnings).filter(Earnings.user_id == current_user.id).first()
    if not earnings:
        earnings = Earnings(user_id=current_user.id, total_earned=0.0)
        db.add(earnings)


    balance.amount += amount
    earnings.total_earned += amount


    service.status = "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π"

    db.commit()

    return {"message": f"–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount}$", "balance": balance.amount}

@router.post("/withdraw")
def withdraw(
    amount: float = Body(..., embed=True),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    balance = db.query(Balance).filter(Balance.user_id == current_user.id).first()
    if not balance or balance.amount < amount:
        raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")

    transaction = Transaction(
        user_id=current_user.id,
        amount=amount,
        status="–û–±—Ä–∞–±–æ—Ç–∞–Ω"
    )
    db.add(transaction)


    balance.amount -= amount

    db.commit()
    db.refresh(transaction)

    return {"message": "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", "transaction": transaction}
 
@router.get("/finances")
def get_finances(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    balance = db.query(Balance).filter(Balance.user_id == current_user.id).first()
    earnings = db.query(Earnings).filter(Earnings.user_id == current_user.id).first()
    transactions = db.query(Transaction).filter(Transaction.user_id == current_user.id).order_by(Transaction.created_at.desc()).all()

    return {
        "balance": balance.amount if balance else 0.0,
        "total_earned": earnings.total_earned if earnings else 0.0,
        "transactions": [
            {
                "id": t.id,
                "amount": t.amount,
                "status": t.status,
                "created_at": t.created_at.strftime("%Y-%m-%d %H:%M")
            }
            for t in transactions
        ]
    }
@router.post("/services/{service_id}/respond")
def respond_to_service(
    service_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    print(f"üéØ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑ {service_id}")
    service = db.query(Service).filter(Service.id == service_id).first()
    if not service:
        raise HTTPException(status_code=404, detail="–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    if service.status != "–û—Ç–∫—Ä—ã—Ç—ã–π":
        raise HTTPException(status_code=400, detail="–ó–∞–∫–∞–∑ —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à—ë–Ω")


    service.freelancer_id = current_user.id
    service.status = "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"



    db.commit()
    db.refresh(service)

    return {
        "message": "–í—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –∑–∞–∫–∞–∑",
        "status": service.status,
        "freelancer_id": service.freelancer_id
    }

@router.get("/services/{service_id}")
def get_service(service_id: int, db: Session = Depends(get_db)):
    service = db.query(Service).filter(Service.id == service_id).first()
    if not service:
        raise HTTPException(status_code=404, detail="–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    owner = db.query(User).filter(User.id == service.user_id).first()
    if not owner:
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return {
        "id": service.id,
        "service_title": service.service_title,
        "description": service.description,
        "price": service.price,
        "duration": service.duration,
        "skills": service.skills,
        "image_path": service.image_path,
        "reviews": service.reviews,
        "status": service.status,
        "category": service.category,
        "responses": service.responses,
        "freelancer_name": service.freelancer_name,
        "user_id": service.user_id,
        "customer": {
            "name": owner.username,
            "email": owner.email
        }
    }
@router.get("/my-completed-services")
def get_my_completed_services(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):

    services = db.query(Service).filter(
        Service.freelancer_id == current_user.id,
        Service.status == "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π"
    ).all()

    result = []
    for service in services:

        customer = db.query(User).filter(User.id == service.user_id).first()
        customer_name = customer.username if customer else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

  
        price = float(service.price) if service.price is not None else 0.0
        duration = service.duration if service.duration is not None else 0

        result.append({
            "id": service.id,
            "service_title": service.service_title,
            "description": service.description,
            "price": price,
            "duration": duration,
            "category": service.category,
            "status": service.status,
            "image_path": service.image_path,
            "freelancer_name": service.freelancer_name,
            "customer_name": customer_name, 
            "customer_id": service.user_id  
        })

    return result

@router.post("/services/{service_id}/rate")
def rate_worker(
    service_id: int,
    rating: float = Body(..., embed=True, ge=0.5, le=5),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –û—Ü–µ–Ω–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    """

    service = db.query(Service).filter(Service.id == service_id).first()
    if not service:
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if service.status != "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π":
        raise HTTPException(status_code=400, detail="–ó–∞–∫–∞–∑ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω")


    if service.user_id != current_user.id:
        raise HTTPException(status_code=403, detail="–¢–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫ –º–æ–∂–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å")


    if not service.freelancer_id:
        raise HTTPException(status_code=400, detail="–£ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")


    existing_review = db.query(Review).filter(
        Review.service_id == service_id,
        Review.reviewer_id == current_user.id
    ).first()

    if existing_review:
        raise HTTPException(status_code=400, detail="–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑")


    review = Review(
        service_id=service_id,
        reviewer_id=current_user.id,
        worker_id=service.freelancer_id,
        rating=rating
    )
    db.add(review)
    db.commit()

    return {"message": "–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞"}
    
@router.get("/services/{service_id}/has-rated")
def has_user_rated(
    service_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):

    review = db.query(Review).filter(
        Review.service_id == service_id,
        Review.reviewer_id == current_user.id
    ).first()
    return {"has_rated": review is not None}

@router.post("/services/{service_id}/rate")
def rate_user(
    service_id: int,
    rating: float = Body(..., ge=0.5, le=5),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):

    service = db.query(Service).filter(Service.id == service_id).first()
    if not service:
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if service.status != "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π":
        raise HTTPException(status_code=400, detail="–ó–∞–∫–∞–∑ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω")


    if service.user_id != current_user.id:
        raise HTTPException(status_code=403, detail="–û—Ü–µ–Ω–∏–≤–∞—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫")

    if not service.freelancer_id:
        raise HTTPException(status_code=400, detail="–£ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")

    existing_review = db.query(Review).filter(
        Review.service_id == service_id,
        Review.reviewer_id == current_user.id
    ).first()

    if existing_review:
        raise HTTPException(status_code=400, detail="–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑")


    review = Review(
        rating=rating,
        reviewer_id=current_user.id,
        worker_id=service.freelancer_id,
        service_id=service_id
    )
    db.add(review)
    db.commit()

    return {"message": "–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞"}

@router.get("/users/{user_id}/rating")
def get_user_rating(user_id: int, db: Session = Depends(get_db)):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    reviews = db.query(Review).filter(Review.worker_id == user_id).all()
    
    if not reviews:
        return {"rating": 0.0, "count": 0}

    total = sum(r.rating for r in reviews)
    avg = total / len(reviews)

    return {"rating": round(avg, 1), "count": len(reviews)}


    