import bcrypt
import jwt
from datetime import datetime, timedelta

from fastapi import Depends, HTTPException, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from sqlalchemy.orm import Session
from models.user import User
from database import SessionLocal



JWT_SECRET = "SECRET_KEY"  
JWT_ALGORITHM = "HS256"
JWT_EXP_DELTA_SECONDS = 86400  



security = HTTPBearer()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def hash_password(password: str) -> str:
    """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º bcrypt"""
    salt = bcrypt.gensalt()
    hashed = bcrypt.hashpw(password.encode("utf-8"), salt)
    return hashed.decode("utf-8")

def verify_password(plain_password: str, hashed_password: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"""
    return bcrypt.checkpw(plain_password.encode("utf-8"), hashed_password.encode("utf-8"))

def create_jwt_token(user_id: int) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞"""
    try:
        payload = {
            "user_id": user_id,
            "exp": datetime.utcnow() + timedelta(seconds=JWT_EXP_DELTA_SECONDS),
            "iat": datetime.utcnow() 
        }
        token = jwt.encode(payload, JWT_SECRET, algorithm=JWT_ALGORITHM)
        return token
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}"
        )

def decode_jwt_token(token: str) -> int:
    try:
        payload = jwt.decode(token, JWT_SECRET, algorithms=[JWT_ALGORITHM])
        user_id = payload.get("user_id")
        if user_id is None:
            raise ValueError("Invalid token: no user ID")
        return int(user_id)  
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=401, detail="–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫")
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")
    except Exception as e:
        raise HTTPException(status_code=401, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")

def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security), db: Session = Depends(get_db)):
    print("üîê –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω:", credentials.credentials)
    try:
        user_id = decode_jwt_token(credentials.credentials)
        print("‚úÖ –†–∞—Å–∫–æ–¥–∏—Ä–æ–≤–∞–Ω user_id:", user_id)
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:", user.username, user.id)
        return user
    except Exception as e:
        print("üî¥ –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", str(e))
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")