import React, { useState, useEffect } from "react";
import { useLocation } from "react-router-dom";
import "./Full_Services.css";
import axios from "axios";

function Full_Services({ formData }) {
  const location = useLocation();
  const [service, setService] = useState(location.state?.service || null);
  const [loading, setLoading] = useState(!location.state?.service);
  const [success, setSuccess] = useState("");
  const [error, setError] = useState("");
  const [executor, setExecutor] = useState(null);
  const [customerAvatar, setCustomerAvatar] = useState(null);
  const [status, setStatus] = useState(service?.status || "–û—Ç–∫—Ä—ã—Ç—ã–π");
  const [reviews, setReviews] = useState(service?.reviews || 0);
  const [copied, setCopied] = useState(false);
  const [responses, setResponses] = useState([]);
  const [executorRating, setExecutorRating] = useState(0);

  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [filteredServices, setFilteredServices] = useState([]);
  const [services, setServices] = useState([]);

  const API_URL = "http://localhost:8000";
  const userData = JSON.parse(localStorage.getItem("user")) || {};
  const currentUser =
    formData?.name || formData?.username || userData.username || "–ê–Ω–æ–Ω–∏–º";

  const hasResponded = responses.includes(currentUser);

  const [customer, setCustomer] = useState(null);
  const [customerRating, setCustomerRating] = useState(0);
  const [customerReviewCount, setCustomerReviewCount] = useState(0);
  const [executorReviewCount, setExecutorReviewCount] = useState(0);
  const [rating, setRating] = useState(0);
  const [hasRated, setHasRated] = useState(false);

  useEffect(() => {
    const checkIfRated = async () => {
      try {
        const token = localStorage.getItem("token");
        const response = await axios.get(
          `${API_URL}/services/${service.id}/has-rated`,
          { headers: { Authorization: `Bearer ${token}` } }
        );
        setHasRated(response.data.has_rated);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ü–µ–Ω–∫–∏:", err);
      }
    };

    if (service.id && userData?.id === service.user_id) {
      checkIfRated();
    }
  }, [service.id, userData]);

  const handleSubmitRating = async () => {
    try {
      const token = localStorage.getItem("token");
      await axios.post(
        `${API_URL}/services/${service.id}/rate`,
        { rating },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setHasRated(true);
      alert(`–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É ${rating} –∑–≤–µ–∑–¥!`);
    } catch (err) {
      alert(err.response?.data?.detail || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É");
    }
  };

  const fetchCustomerRating = async (customerId) => {
    console.log("üîç –ó–∞–ø—Ä–æ—Å —Ä–µ–π—Ç–∏–Ω–≥–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞:", customerId);
    if (!customerId) {
      setCustomerRating(0);
      setCustomerReviewCount(0);
      return;
    }
    try {
      const token = localStorage.getItem("token");
      const response = await axios.get(
        `http://localhost:8000/users/${customerId}/rating`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      console.log("‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–∑–∞–∫–∞–∑—á–∏–∫):", response.data);
      setCustomerRating(response.data.rating);
      setCustomerReviewCount(response.data.count);
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞:", err);
      setCustomerRating(0);
      setCustomerReviewCount(0);
    }
  };


  const fetchExecutorRating = async (freelancerId) => {
    console.log("üîç –ó–∞–ø—Ä–æ—Å —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:", freelancerId);
    if (!freelancerId) {
      setExecutorRating(0);
      setExecutorReviewCount(0);
      return;
    }
    try {
      const token = localStorage.getItem("token");
      const response = await axios.get(
        `http://localhost:8000/users/${freelancerId}/rating`,
        { headers: { Authorization: `Bearer ${token}` } }
      );
      console.log("‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å):", response.data);
      setExecutorRating(response.data.rating);
      setExecutorReviewCount(response.data.count);
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:", err);
      setExecutorRating(0);
      setExecutorReviewCount(0);
    }
  };

  useEffect(() => {
    console.log("üîÅ useEffect –∑–∞–ø—É—â–µ–Ω");
    console.log("location.search:", location.search);
    console.log("service:", service);
    const searchParams = new URLSearchParams(location.search);
    const serviceId = searchParams.get("id");

    const fetchCustomer = async (userId) => {
      if (!userId) return;
      try {
        const token = localStorage.getItem("token");
        const response = await axios.get(
          `http://localhost:8000/users/${userId}`,
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );
        setCustomer(response.data);
      } catch (err) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–∞:", err);
        setCustomer(null);
      }
    };


    const fetchExecutor = async (freelancerId) => {
      if (!freelancerId) {
        setExecutor(null);
        return;
      }
      try {
        const token = localStorage.getItem("token");
        const response = await axios.get(
          `http://localhost:8000/users/${freelancerId}`,
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );
        setExecutor(response.data);
      } catch (err) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:", err);
        setExecutor(null);
      }
    };

    const fetchCustomerAvatar = async (userId) => {
      if (!userId) {
        setCustomerAvatar(null);
        return;
      }
      try {
        const token = localStorage.getItem("token");
        const response = await axios.get(
          `http://localhost:8000/users/${userId}/avatar`,
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );


        let imagePath = response.data.image_path;
        console.log("–ü–æ–ª—É—á–µ–Ω –ø—É—Ç—å –∞–≤–∞—Ç–∞—Ä–∫–∏:", imagePath);


        if (imagePath && !imagePath.startsWith("/")) {
          imagePath = "/" + imagePath;
        }


        const fullUrl = `http://localhost:8000${imagePath}`;
        console.log("–§–æ—Ä–º–∏—Ä—É–µ–º—ã–π URL –∞–≤–∞—Ç–∞—Ä–∫–∏:", fullUrl);

        setCustomerAvatar(fullUrl);
      } catch (err) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä –∑–∞–∫–∞–∑—á–∏–∫–∞:", err);
        setCustomerAvatar(null);
      }
    };


    const fetchService = async (id) => {
      try {
        setLoading(true);
        const response = await axios.get(
          `http://localhost:8000/services/${id}`
        );
        const serviceData = response.data;
        setService(serviceData);


        if (serviceData.user_id) {
          await fetchCustomer(serviceData.user_id);
          await fetchCustomerAvatar(serviceData.user_id);
          await fetchCustomerRating(serviceData.user_id);
        }

        if (serviceData.freelancer_id) {
          await fetchExecutor(serviceData.freelancer_id);
          await fetchExecutorRating(serviceData.freelancer_id);
        }
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–∏—Å–∞:", err);
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–∏—Å");
      } finally {
        setLoading(false);
      }
    };


    if (serviceId) {
      if (service && service.id === Number(serviceId)) {
        if (service.user_id) {
          fetchCustomer(service.user_id);
          fetchCustomerAvatar(service.user_id);
          fetchCustomerRating(service.user_id);
        }
        if (service.freelancer_id) {
          fetchExecutor(service.freelancer_id);
          fetchExecutorRating(service.freelancer_id);
        }
      } else {
        fetchService(serviceId);
      }
    } else {
      if (service) {
        if (service.user_id) {
          fetchCustomer(service.user_id);
          fetchCustomerAvatar(service.user_id);
          fetchCustomerRating(service.user_id);
        }
        if (service.freelancer_id) {
          fetchExecutor(service.freelancer_id);
          fetchExecutorRating(service.freelancer_id);
        }
      } else {
        alert("–ù–µ —É–∫–∞–∑–∞–Ω ID —Å–µ—Ä–≤–∏—Å–∞");
      }
    }
  }, [location, service]);

  const changeStatus = async (newStatus) => {
    try {
      setLoading(true);

      const statusResponse = await fetch(
        `http://localhost:8000/services/${service.id}/status`,
        {
          method: "PATCH",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ status: newStatus }),
        }
      );

      if (!statusResponse.ok) {
        const error = await statusResponse.json().catch(() => ({}));
        throw new Error(error.detail || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞");
      }

      const statusResult = await statusResponse.json();
      setStatus(statusResult.status);

      if (newStatus === "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ" && !hasResponded) {
        const updatedReviews = reviews + 1;

        const reviewsResponse = await fetch(
          `http://localhost:8000/services/${service.id}/reviews`,
          {
            method: "PATCH",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ reviews: updatedReviews }),
          }
        );

        if (!reviewsResponse.ok) {
          throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∑—ã–≤–æ–≤");
        }

        const reviewsResult = await reviewsResponse.json();
        setReviews(reviewsResult.reviews);

        const responseResponse = await fetch(
          `http://localhost:8000/services/${service.id}/responses`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ name: currentUser }),
          }
        );

        if (!responseResponse.ok) {
          const error = await responseResponse.json().catch(() => ({}));
          throw new Error(error.detail || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–∏–∫–∞");
        }

        const responseResult = await responseResponse.json();
        setResponses([...responses, responseResult.name]);
      } else {
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞:", error);
      alert(error.message);
    } finally {
      setLoading(false);
    }
  };

  const copyToClipboard = () => {
    const currentUrl = `${window.location.origin}/Full_Services?id=${service.id}`;

    navigator.clipboard
      .writeText(currentUrl)
      .then(() => {
        setCopied(true);
        setTimeout(() => setCopied(false), 2000);
      })
      .catch((err) => {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç: ", err);
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É");
      });
  };

  const handleRespond = async () => {
    try {
      console.log("üîß handleRespond –≤—ã–∑–≤–∞–Ω");

      const token = localStorage.getItem("token");
      console.log("–¢–æ–∫–µ–Ω:", token ? "–µ—Å—Ç—å" : "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");

      if (!token) {
        setError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç");
        return;
      }

      if (!service?.id) {
        console.error("‚ùå service.id –Ω–µ –Ω–∞–π–¥–µ–Ω", service);
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∑–∞–∫–∞–∑–∞");
        return;
      }

      console.log(
        "–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞:",
        `${API_URL}/services/${service.id}/respond`
      );

      const response = await axios.post(
        `${API_URL}/services/${service.id}/respond`,
        {},
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:", response.data);


      setStatus(response.data.status);
      setSuccess("–í—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –∑–∞–∫–∞–∑");
      setError("");
      setResponses([...responses, currentUser]);

      setTimeout(() => setSuccess(""), 1500);
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–∏–∫–∞:", err);
      console.error("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", err.response?.data);

      setError(
        err.response?.data?.detail || err.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è"
      );
      setSuccess("");
    } finally {
      setLoading(false);
    }
  };


  const handleComplete = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem("token");

      const response = await axios.patch(
        `${API_URL}/services/${service.id}/complete`,
        {},
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      setStatus("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π");
      setSuccess(`–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${response.data.balance}$`);
      setError("");
      setTimeout(() => setSuccess(""), 3000);
    } catch (err) {
      setError(err.response?.data?.detail || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑");
      setSuccess("");
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem("token");

      const statusResponse = await axios.patch(
        `${API_URL}/services/${service.id}/status`,
        { status: "–û—Ç–∫—Ä—ã—Ç—ã–π" },
        {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
        }
      );


      const updatedReviews = Math.max(0, reviews - 1);
      const reviewsResponse = await axios.patch(
        `${API_URL}/services/${service.id}/reviews`,
        { reviews: updatedReviews },
        {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
        }
      );


      await axios.delete(`${API_URL}/services/${service.id}/responses`, {
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        data: { name: currentUser },
      });

      setStatus("–û—Ç–∫—Ä—ã—Ç—ã–π");
      setReviews(updatedReviews);
      setExecutor(null);
      setResponses(responses.filter((name) => name !== currentUser));

      setSuccess("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞. –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–û—Ç–∫—Ä—ã—Ç—ã–π'");
      setTimeout(() => setSuccess(""), 3000);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞:", err);
      setError(err.response?.data?.detail || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑");
      setSuccess("");
    } finally {
      setLoading(false);
    }
  };

  const checkAuth = () => {
    const token = localStorage.getItem("token");
    setIsAuthenticated(!!token);
  };

  useEffect(() => {
    checkAuth();
  }, []);


  useEffect(() => {
    window.addEventListener("storage", checkAuth);
    return () => window.removeEventListener("storage", checkAuth);
  }, []);

  const fetchServices = async () => {
    try {
      setLoading(true);
      const response = await axios.get("http://localhost:8000/services");
      setServices(response.data);
      setFilteredServices(response.data);
      setLoading(false);
    } catch (err) {
      setError(err.message);
      setLoading(false);
    }
  };

  if (!service) {
    return <div>–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω</div>;
  }

  const getStatusClass = (status) => {
    if (status === "–û—Ç–∫—Ä—ã—Ç—ã–π") return "status-tag-open";
    if (status === "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ") return "status-tag-working";
    if (status === "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π") return "status-tag-completed";
    return "status-tag";
  };

  return (
    <>
      <div className="full-services-main">
        <div className="full-services-container">
          <div className="left-column">
            <div className="full-services-info">
              <div className="header-mini-info">
                <h3>{service.service_title}</h3>
                <p className={getStatusClass(status)}>{status}</p>
              </div>

              <div className="mini-info-service">
                <p>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {new Date().toLocaleDateString()}</p>
                <p>‚Ä¢</p>
                <p>ID: {service.id || "–ù–µ—Ç ID"}</p>
              </div>
              <div className="main-skills-full">
                {service.skills ? (
                  service.skills.split(",").map((skill, index) => (
                    <span className="skill-tag skill-tag-full" key={index}>
                      {skill.trim()}
                    </span>
                  ))
                ) : (
                  <span>–ù–µ—Ç –Ω–∞–≤—ã–∫–æ–≤</span>
                )}
              </div>
              <div className="price-duration">
                <div className="main-price-full">
                  <p className="price-full">{service.price} $</p>
                  <p>–ë—é–¥–∂–µ—Ç</p>
                </div>
                <div className="main-duration-full">
                  <p className="price-full">{service.duration} –¥–Ω–µ–π</p>
                  <p>–°—Ä–æ–∫</p>
                </div>
                <div className="main-category-full">
                  <p className="price-full">{service.category}</p>
                  <p>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</p>
                </div>
              </div>
            </div>

            <div className="full-services-description">
              <p className="description-title">–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</p>
              <p>{service.description}</p>
            </div>

            <div className="full-services-likes">

              <div>
                <h2>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</h2>

                {status === "–û—Ç–∫—Ä—ã—Ç—ã–π" ? (
                  <div className="full-services-executor">
                    <div>
                      –ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                    </div>
                  </div>
                ) : null}

                {status === "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ" || status === "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π" ? (
                  <div className="full-services-executor">
                    
                    <div>
                      <p>–ù–∏–∫–Ω–µ–π–º: {executor?.username || "?"}</p>
                      <p>Email: {executor?.email || "?"}</p>
                      <p>
                        –†–µ–π—Ç–∏–Ω–≥:{""}
                        {executorRating > 0 ? executorRating.toFixed(1) : ""} ‚òÖ
                        <p>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {executorReviewCount}</p>

                      </p>
                    </div>
                  </div>
                ) : null}
              </div>

              {isAuthenticated &&
                status === "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π" &&
                userData?.id === service.user_id &&
                !hasRated && (
                  <div className="rating-section">
                    <p className="rating-label">–û—Ü–µ–Ω–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</p>
                    <div className="rating-stars">
                      <fieldset className="rating">
                        {[5, 4.5, 4, 3.5, 3, 2.5, 2, 1.5, 1, 0.5].map(
                          (value) => {
                            const isHalf = value % 1 !== 0;
                            const id = `star${value
                              .toString()
                              .replace(".", "")}`;

                            return (
                              <React.Fragment key={value}>
                                <input
                                  type="radio"
                                  id={id}
                                  name="rating"
                                  value={value}
                                  checked={rating === value}
                                  onChange={() => setRating(value)}
                                />
                                <label
                                  className={isHalf ? "half" : "full"}
                                  htmlFor={id}
                                  title={`${value} –∑–≤–µ–∑–¥${
                                    value === 1 ? "–∞" : "—ã"
                                  }`}
                                ></label>
                              </React.Fragment>
                            );
                          }
                        )}
                      </fieldset>
                    </div>
                    <button
                      className="save-btn"
                      onClick={handleSubmitRating}
                      disabled={rating === 0}
                    >
                      –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É
                    </button>
                  </div>
                )}
            </div>
          </div>

          <div className="right-column">
            <div className="full-services-customer">
              <h2>–ó–∞–∫–∞–∑—á–∏–∫</h2>
              <div>
                <img
                  src={customerAvatar || "./img/user.webp"}
                  alt="–∞–≤–∞—Ç–∞—Ä –∑–∞–∫–∞–∑—á–∏–∫–∞"
                  className="logo-customer"
                  onError={(e) => {
                    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏:", customerAvatar);
                    e.target.src = "./img/user.webp";
                    setCustomerAvatar(null);
                  }}
                />
                <p>–ù–∏–∫–Ω–µ–π–º: {customer?.username || "?"}</p>
                <p>Email: {customer?.email || "?"}</p>
                <p>
                  –†–µ–π—Ç–∏–Ω–≥:{" "}
                  {customerRating > 0 ? customerRating.toFixed(1) : ""}‚òÖ 
                  <p>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {executorReviewCount}</p>
                </p>
              </div>
            </div>

            <div className="full-services-actions">
              <p>–î–µ–π—Å—Ç–≤–∏—è</p>

              {isAuthenticated ? (
                status === "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ" ? (
                  <>
                    <button
                      disabled={loading}
                      onClick={handleComplete}
                      className="action-btn"
                    >
                      {loading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑"}
                    </button>
                    <button
                      disabled={loading}
                      onClick={handleCancel}
                      className="action-btn"
                    >
                      {loading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞"}
                    </button>
                  </>
                ) : (
                  <button
                    disabled={loading || status === "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π"}
                    onClick={handleRespond}
                    className={
                      status === "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π"
                        ? "action-btn-disabled"
                        : "action-btn"
                    }
                  >
                    {loading
                      ? "–ó–∞–≥—Ä—É–∑–∫–∞..."
                      : status === "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π"
                      ? "–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω"
                      : "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –∑–∞–∫–∞–∑"}
                  </button>
                )
              ) : (
                <button disabled className="action-btn-disabled">
                  –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –∑–∞–∫–∞–∑
                </button>
              )}

              <button onClick={copyToClipboard} className="action-btn">
                {copied ? "–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!" : "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"}
              </button>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

export default Full_Services;
